<% content_for :subtitle, @group.name %>
<% if @members.length >= 2 %>
  <div class=blocks_row>
    <div id=trans class=box>
      <%= form_for [@group, @new_transaction] do |tf| %>
        <h3>New transaction</h3>
        <table style="float:left;margin:0 0 20px">
          <tr>
            <td>
              <p><%= tf.label :description %></p>
              <%= tf.text_field :description, {:size => 1, :style => 'width:100%'} %>
            <td style=width:1px;padding-left:4px>
              <p><%= tf.label :date %></p>
              <%= tf.text_field :date, {:size => 6} %>
          <tr>
            <td colspan=2>
              <div style=margin-top:8px>
                <%= collection_select(:transaction, :payer, @group.members, :id, :name, :selected => cookies[@group.id.to_s + '_last_payer']) %>
              &nbsp;paid&nbsp; $ <%= tf.text_field :amount, {:size => 6} %>
              </div>
        </table>
        <div style="float:left;margin:0 0 12px 24px">
          <p>Split between
          <div class=no_select>
            <table id=split>
              <% @members.each_with_index do |member,i| %>
                <tr userId=<%= member.to_param %>>
                  <td><input type=checkbox checked id=split<%= member.to_param %>><%= label_tag "split#{member.to_param}", ' ' + member.name %> &nbsp;
                  <td>$ <%= text_field_tag "transaction[members][#{member.to_param}]", '', {:size => 6, :class => "auto", :id => "transaction-amount-#{i}"} %>
              <% end %>
            </table>
          </div>
        </div>
        <p style=clear:both;height:31px>
        <p style=position:absolute;bottom:24px>
          <%= tf.submit('Add transaction', {:class => 'primary'}) %><button style=margin-left:12px type=reset>Cancel</button>
      <% end %>
    </div>
    <div id=settle class=box>
      <% if @group.best_way_to_settle.length == 0 %>
        <h3>All debts are settled</h3>
        <p style=max-width:220px>Everyone in the group is even. When you add new transactions, the best way to settle will be shown here. 
      <% else %>
        <% members_by_balance = @members.sort_by(&:balance) %>
        <div style=float:left>
          <h3>Owed</h3>
          <ul>
            <% members_by_balance.reverse.find_all{|m| m.balance > 0}.each do |member| %>
              <li><%= "#{member.name}: #{money(member.balance)}" %>
            <% end %>
          </ul>
        </div>
        <div style=float:left;margin-left:24px>
          <h3>Owes</h3>
          <ul>
            <% members_by_balance.find_all{|m| m.balance < 0}.each do |member| %>
              <li><%= "#{member.name}: #{money(member.balance)}" %>
            <% end %>
          </ul>
        </div>
        <h3 style=clear:both;padding-top:12px>Settle</h3>
        <ul>
          <% @group.best_way_to_settle.each do |settlement| %>
            <li><%= settlement[:payer].name %> pays <%= settlement[:payee].name %> <%= money(settlement[:amount]) %> - 
            <%= form_for :transaction, :url => group_transactions_url(@group), :html => {:style => 'display:inline', :class => "settlement-form"} do |f| %>
                <%= f.hidden_field(:payer, :value => settlement[:payer].to_param) %>
                <%= f.hidden_field(:settlement, :value => '1') %>
                <%= f.hidden_field(:amount, :value => settlement[:amount].to_f / 100) %>
                <%= f.hidden_field(:description, :value => "#{settlement[:payer].name} settled with #{settlement[:payee].name}") %>
                <%= hidden_field_tag "transaction[members][#{settlement[:payee].to_param}]", settlement[:amount].to_f / 100 %>
                <a href="javascript:return false" onclick="$(this).closest('form').submit()">Settle</a>
            <% end %>
          <% end %>
          <!-- <li><a href="javascript:return false">Settle all</a> -->
        </ul>
      <% end %>
    </div>
    <div id=members class=box>
      <ul>
        <h3>Members</h3>
      <% @members.each do |member| %>
       <li> <%= member.name %> </li>
      <% end %>
      <%= link_to "Add", group_settings_url(@group) %>
      </ul>
    </div>
  </div>
<% else %>
  <div class=box>
    <h3>Please add members</h3>
    The group must contain 2 or more members to add transactions.  Please <%= link_to "add members", group_settings_url(@group) %>.
  </div>
<% end %>
<div id=hist>
  <% if @transactions.length > 0 %>
    <table id=hist_table>
      <tr>
        <th>Date
        <th>Added
        <th>Description
        <th>Cost
        <% @group.members.each do |member|%>
          <th><%= member.name %>
        <% end %>
        <th style=visibility:hidden>Duplicate
      <% sorted_transactions = @transactions.sort do |a, b|
           res = b.display_date <=> a.display_date
           res = b.created_at <=> a.created_at if res == 0
           res
         end
         sorted_transactions.each do |transaction| %>
		<% cache("group::#{@group.id}::transaction::#{transaction.id}") do %>
        	<tr class=t>
	          <td>
	              <%= transaction.display_date %>
	          </td>
	          <td><%= transaction.created_at.to_date %></td>
	          <td class="description"><%= transaction.description %>
	          <td><%= money_no_unit(transaction.amount) %>
	          <% @group.members.each do |member| %>
	            <td>
	            <%
	              credits = member.credits_for_transaction(transaction)
	              debits = member.debits_for_transaction(transaction)
	              next if credits == 0 and debits == 0
	            %>
	            <div class=eq><p class=credit><%= money_no_unit_no_zero(credits) %>
	              <p class=debit><%= money_no_unit_no_zero(-debits) %><hr></div>
	              <%= money_no_unit(credits - debits) %>
	          <% end %>
	          <td><ul>
	            <% if not transaction.settlement %>
	              <li><a href="javascript:bc.duplicateTransaction(<%= transaction.to_json %>)">Duplicate</a>
	            <% end %>
	            <li><%= form_for transaction, :url => group_transaction_url(@group, transaction), :html => {:style => 'display:inline', :method => :delete} do %>
	              <a href="javascript:return false" onclick="$(this).closest('form').submit()">Delete</a>
	            <% end %>
	        </tr>
		<% end %> 
      <% end %>
      <tr class=b>
        <td>
        <td>Total
        <td><%= @transactions.size %> transactions
        <% @group.members.each do |member|%>
          <td><%= money(member.balance) %>
        <% end %>
        <td>
    </table>
  <% end %>
</div>

<% content_for :page_script do %>
<script>
var bc = {};

$(function() {
  var maxColHeight = Math.max($('#trans').height(),$('#settle').height(), $('#members').height());
  $('#trans,#settle,#members').height(maxColHeight);

  var date_text = $('#transaction_date');
  var setDate = function(date) {
    date_text.datepicker('setDate', date || new Date);
  };
  $.datepicker.setDefaults({showAnim:'',prevText:'Previous'});
  date_text.datepicker().datepicker('widget').css('display', 'none');
  setDate();

  var hideRows = function() {
    $('#hist_table tr').removeClass('s');
  };
  document.body.onclick = hideRows;
  $('.t').click(function(e) {
    hideRows();
    $(this).addClass('s');
    e.stopPropagation();
  });

  var splitCheckChange = function() {
    if (!this.on()) {
      this.val('');
    }
    updateSplit();
  };
  var splitTextFocus = function() {
    if (this.auto()) {
      this.typeVal = this.focusVal = this.val();
      this.auto(false);
    } else {
      this.focusVal = null;
    }
  };
  var splitTextBlur = function() {
    var val = this.val();
    if (val === this.focusVal) {
      this.auto(true);
    } else if (val == 0) {
      this.on(false);
      updateSplit();
    }
  };
  var splitTextKeyup = function() {
    var val = this.val();
    if (val != this.typeVal) {
      this.typeVal = val;
      updateSplit();
    }
  };
  var money_no_unit = function(num) {
    num = parseFloat(num);
    if (isNaN(num)) {
      return '';
    } else {
      return num.toFixed(2);
    }
  };
  var moneyTextBlur = function() {
    var text = $(this);
    text.val(money_no_unit(text.val()));
  };
  var SplitItem = function(row) {
    var that = this,
        check = row.find('[type="checkbox"]'),
        text = row.find('[type="text"]');
    this.userId = row.attr("userid");
    this.check = check;
    this.text = text;
    this.focusVal = null;
    this.typeVal = null;
    var wrapEvent = function(f) {
      return function() {
        f.apply(that, arguments);
      }
    };
    check.change(wrapEvent(splitCheckChange));
    text.focus(wrapEvent(splitTextFocus));
    text.blur(wrapEvent(splitTextBlur));
    text.keyup(wrapEvent(splitTextKeyup));
    text.blur(moneyTextBlur);
  };
  SplitItem.prototype = {
    on: function() {
      switch (arguments.length) {
        case 0:
          return this.check.is(':checked');
        case 1:
          if (arguments[0]) {
            this.check.attr('checked','checked');
          } else {
            this.check.removeAttr('checked');
            this.val('');
          }
          return this;
      }
    },
    auto: function() {
      switch (arguments.length) {
        case 0:
          return this.text.is('.auto');
        case 1:
          if (arguments[0]) {
            this.text.addClass('auto');
          } else {
            this.text.removeClass('auto');
          }
          return this;
      }
    },
    val: function() {
      switch (arguments.length) {
        case 0:
          var val = Math.round(parseFloat(this.text.val()) * 100);
          return (isNaN(val)) ? '' : val;
        case 1:
          var val = parseInt(arguments[0]) / 100;
          val = (val < 0) ? '' : money_no_unit(val);
          if (val === '') {
            this.text.attr('disabled', 'disabled');
            this.auto(true);
          } else {
            this.text.removeAttr('disabled');
            this.on(true);
          }
          this.text.val(val);
          return this;
      }
    }
  };
  var updateSplit = function() {
    if (amount.val() === '') {
      _.each(splitItems, function(item) { item.val('') });
    } else {
      var total = Math.round(amount.val() * 100),
          manualTotal = _.reduce(splitItems, function(memo, item) {
              return memo + ((!item.auto() && item.val()) ? item.val() : 0);
            }, 0),
          autoItems = _.select(splitItems, function(item) {
            return item.on() && item.auto();
          }),
          splitAmount = total - manualTotal,
          autoItemsLen = autoItems.length,
          split = Math.floor(splitAmount / autoItemsLen),
          remain = splitAmount % split;
      autoItems.sort(function() { return 0.5 - Math.random() });
      _.each(autoItems, function(item, i) {
        item.val(split + ((remain-- > 0) ? 1 : 0));
      });
    }
  };
  var splitRows = $('#split tr'),
      splitItems = _.map(splitRows, function(row) { return new SplitItem($(row)) }),
      amount = $('#transaction_amount'),
      payer = $('#transaction_payer'),
      description = $('#transaction_description')
  amount.keyup(updateSplit);
  amount.blur(moneyTextBlur);
  updateSplit();

  var newTransaction = function() {
    setDate();
    _.each(splitItems, function(item) { item.on('true').val('') });
  }
  $('#new_transaction').bind('reset', function() {
    setTimeout(newTransaction, 1);
  });
  var duplicateTransaction = function(transaction) {
    var evenSplit = transaction.amount / transaction.debits.length;
    var autoSplit = _.all(transaction.debits, function(debit) {
          return evenSplit - 1 <= debit[1] && debit[1] <= evenSplit + 1; // check if all debits are within 1 cent of even split
        });
    setDate();
    _.each(splitItems, function(item) { item.on(false) });
    _.each(transaction.debits, function(debit) {
      var item = _.find(splitItems, function(item){ return item.userId == debit[0].toString()});
      var debitAmount = debit[1];
      if (debitAmount != 0) {
        item.auto(autoSplit).val(debitAmount);
      }
    });
    // Assume exactly one credit per transaction
    credit = transaction.credits[0];
    payer.val(credit[0]);
    amount.val(money_no_unit(credit[1] / 100));
    description.val(transaction.description);
  };
  bc.duplicateTransaction = duplicateTransaction;

});
</script>
<% end %>